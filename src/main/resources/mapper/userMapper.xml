<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="bit.data.dao.UserDao">
	<!-- 친구목록 -->
	<select id="selectFriendData" parameterType="HashMap" resultType="userDto">
		select * from user where nickname like CONCAT('%',#{search},'%') and num in (
		select userNum from userFriend where friendNum=#{friendNum} and userFriend.check=#{check}
		union all
		select friendNum from userFriend where userNum=#{userNum} and userFriend.check=#{check});
	</select>
	
	<!-- 친구요청목록 -->
	<select id="selectFreindRequest" parameterType="HashMap" resultType="userDto">
		select * from user where nickname like CONCAT('%',#{search},'%') and num in (select userNum from userFriend where friendNum=#{friendNum} and userFriend.check=#{check})
	</select>
	
	<!-- 친구인원수 조회 -->
	<select id="getUserFriendCount" parameterType="HashMap" resultType="int">
		select count(*) from user where nickname like CONCAT('%',#{search},'%') and num in (
		select userNum from userFriend where friendNum=#{friendNum} and userFriend.check=#{check}
		union all
		select friendNum from userFriend where userNum=#{userNum} and userFriend.check=#{check});
	</select>
	
	<!-- 개인회원가입-->
	<insert id="insertUser" parameterType="userDto">
		insert into user values (null,#{email},#{password},#{nickname},#{profileImage},#{phone},#{address},#{gender},#{point},#{year},#{date},#{loginType},now(),#{isAdmin},#{salt},#{status})		
	</insert>
	
	<!-- 개인회원가입 중복체크 -->
	<select id="getUserIdSearch" parameterType="String" resultType="int">
		select sum(cnt) from (select count(*) cnt from user where email=#{email} union all select count(*) cnt from seller where email=#{email}) as t
	</select>
	
	<!-- 로그인 -->
	<select id="loginIdPassCheck" parameterType="Map" resultType="int">
		select count(*) from user where email=#{loginid} and password=#{loginpass}
	</select>
	
	<!-- 로그인 후 아이디 및 사진 출력 및 salt 값 -->
	<select id="getDataById" parameterType="String" resultType="userDto">
		select * from user where email=#{email}
	</select>
	
	<!--리뷰페이지 유저정보 -->
	<select id="getReviewUserInfo" parameterType="int"  resultType="userDto">
		select * from user u where num in (select userNum from review r where r.userNum=u.num)
	</select>
	
	<!-- 친구 아닌 모든 유저 조회 -->
	<select id="selectNonFriendlyUsersList" parameterType="HashMap"  resultType="userDto">
		select * from user where nickname like CONCAT('%',#{search},'%') 
		and num not in (#{userNum}) and num not in (
		select userNum from userFriend where friendNum=#{friendNum} and userFriend.check=1 
		union all 
		select friendNum from userFriend where userNum=#{userNum} and userFriend.check=1);
	</select>

	<!--유저 업데이트 -->
	<update id="updateUser" parameterType="userDto">
		update user set profileImage=#{profileImage},password=#{password},nickname=#{nickname},phone=#{phone},address=#{address},salt=#{salt},status=#{status} where email=#{email}
	</update>

	<!-- 마이페이지 내 문의내역 -->
	<select id="getQnaList" parameterType="int" resultType="qnaDto">
		select *
		  from qna as qa
		   join qnaCategory as qc
		    on qa.qnaCategoryNum = qc.num
		     where userNum=#{userNum}
	</select>
	
	<!-- 아이디 찾기 -->
	<select id="searchId" parameterType="Map"  resultType="String">
		select email from user where nickname=#{nickname} and phone=#{phone}
	</select>
	
	<!-- 비밀번호 재설정 전 정보 확인 -->
	<select id="searchPass" parameterType="Map"  resultType="userDto">
		select * from user where nickname=#{nickname} and email=#{email}
	</select>
	
	<!-- 친구 추가 -->
	<insert id="isertFriend" parameterType="HashMap">
		insert into userFriend values 
		<foreach collection="list" item="item" separator=",">
			(null,#{item.userNum},#{item.friendNum},0)
        </foreach>
	</insert>
	
	<!-- 친구 삭제 -->
	<delete id="deleteFriend" parameterType="HashMap">
		delete from userFriend where userNum=#{userNum} and friendNum=#{friendNum} or userNum=#{friendNum} and friendNum=#{userNum}
	</delete>
	
	<!-- 친구요청 수락 -->
	<update id="updateFriend" parameterType="HashMap">
		update userFriend set userFriend.check=1 where userNum=#{userNum} and friendNum=#{friendNum}
	</update>
	
	<!-- 단일 유저 조회 -->
	<select id="selectUser" parameterType="int" resultType="userDto">
		select * from user where num=#{userNum}

	</select>
	
	<!-- 비번찾기 후 수정 -->
	<update id="updateUserPass" parameterType="userDto">
		update user set password=#{password},salt=#{salt} where email=#{email}
	</update>

</mapper>